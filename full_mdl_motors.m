%
% Robot model
%
% Author: Kevin J Worrall
%
% Created: 14/12/07
%
% Changes
%   20141114 -  KJW - Added in PSI correction
%                   - Model now returns xo as well. this updates x(24)
%               
%
%
%


function [xdot, xo] = full_mdl_motors(Va,xi,ty,tx,fz,xtra_fric,stepsize)

%--------------------%
%Used to keep psi between -180 -> +180
if(xi(24)>=(pi))
    xi(24)=xi(24)-(2*pi);
elseif(xi(24)<-pi)
    xi(24)=xi(24)+(2*pi);
end;
%--------------------%

%---------------------------------------------------------------------%
% Set Variables
I1 = xi(1);   % Current, Amps
w1 = xi(2);   % Wheel speed, rad/s
t1 = xi(3);   % Wheel torque, Nm
I2 = xi(4);   % Current, Amps
w2 = xi(5);   % Wheel speed, rad/s
t2 = xi(6);   % Wheel torque, Nm
I3 = xi(7);   % Current, Amps
w3 = xi(8);   % Wheel speed, rad/s
t3 = xi(9);   % Wheel torque, Nm
I4 = xi(10);   % Current, Amps
w4 = xi(11);   % Wheel speed, rad/s
t4 = xi(12);   % Wheel torque, Nm
u = xi(13);
v = xi(14);
w = xi(15);
p = xi(16);
q = xi(17);
r = xi(18);
xx = xi(19);  % xx because the input matrix is x
y = xi(20);
z = xi(21);
phi = xi(22);
theta = xi(23);
psi = xi(24);

% Motor Input
Va1 = Va(1);
Va2 = Va(2);
Va3 = Va(3);
Va4 = Va(4);     

% Setup Cosines and Sines
% Cosines
cphi = cos(phi); ctheta = cos(theta); cpsi = cos(psi);

% Sines
sphi = sin(phi); stheta = sin(theta); spsi = sin(psi);
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Robot Specifications
m = 2.148;          % Mass of robot, kg
wheel_r = 0.0635;   % Radius of Wheel, m
x_area = 0.0316;    % Area presented on the x-axis, m.m
y_area = 0.0448;    % Area presented on the y-axis, m.m
Jx = 0.0140;        % Moment of Inertia about the x-axis, kg.m.m
Jy = 0.0252;        % Moment of Inertia about the y-axis, kg.m.m
Jz = 0.0334;        % Moment of Inertia about the z-axis, kg.m.m
mr = 0.1245;        % Moment Arm

% Motor Spec's
Ra = 4;                         % Resistance of motor, Ohms
La = 0.1;                       % Inductance of motor, H
Kt = 0.35;                      % torque constant, Nm/A
Ke = 0.35;                      % EMF constant, V/rad/s
bs = 0.008;                     % Viscous torque, Nm 
Jm = 0.005;                     % Moment of Inertia for motor, kg m^2
fric_constant = 0.002+xtra_fric;% Friction acting on the wheel, Nm

% Constants
g = 9.81;           % Gravity, m/s.s
Cd = 0.89;          % Drag Coefficent
rho= 1.29;          % Air density
W = 21.0719;        % m*g; %Weight
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Motor Calculations
% Motor 1
I1dot = ((-Ra*I1)-(Ke*w1)+Va1)/La;              % di/dt 
tau_friction = fric_constant*w1;
w1dot = ((Kt*I1)-(bs*w1)-tau_friction)/Jm;      % Acceleration
eff = (abs(I1)*-0.1330)+0.6;
if (Va1 == 0),
    t1dot = (0-t1)/stepsize;
else
    t1dot = (Kt*I1*eff-t1)/stepsize;                          % Torque
end;

% Motor 2
I2dot = ((-Ra*I2)-(Ke*w2)+Va2)/La;              % di/dt 
tau_friction = fric_constant*w2;
w2dot = ((Kt*I2)-(bs*w2)-tau_friction)/Jm;      % Acceleration
eff = (abs(I2)*-0.1330)+0.6;
if (Va2 == 0),
    t2dot = (0-t2)/stepsize;
else
    t2dot = (Kt*I2*eff-t2)/stepsize;                          % Torque
end;

% Motor 3
I3dot = ((-Ra*I3)-(Ke*w3)+Va3)/La;              % di/dt 
tau_friction = fric_constant*w3;
w3dot = ((Kt*I3)-(bs*w3)-tau_friction)/Jm;      % Acceleration
eff = (abs(I3)*-0.1330)+0.6;
if (Va3 == 0),
    t3dot = 0-(t3/stepsize);
else
    t3dot = (Kt*I3*eff-t3)/stepsize;                          % Torque
end;

% Motor 4
I4dot = ((-Ra*I4)-(Ke*w4)+Va4)/La;              % di/dt 
tau_friction = fric_constant*w4;
w4dot = ((Kt*I4)-(bs*w4)-tau_friction)/Jm;      % Acceleration
eff = (abs(I4)*-0.1330)+0.6;
if (Va4 == 0),
    t4dot = (0-t4)/stepsize;
else
    t4dot = (Kt*I4*eff-t4)/stepsize;                          % Torque
end;
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Input Forces
% Calculated from the torques generated by the wheels. 
force_l1 = (t1/wheel_r);
force_l2 = (t2/wheel_r);
force_r1 = (t3/wheel_r);
force_r2 = (t4/wheel_r);
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Slip
% calculates the slip angle for each wheel
bottom = sqrt((u^2)+(v^2));   % calculate denominator

if bottom == 0,                  % check if 0,
    beta = 0;                    %   if 0 then no movement, no slip
else
    beta = asin(v/bottom);       % else calculate slip
end;
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Propulsion Forces
surge = (force_l1+force_l2+force_r1+force_r2)*cos(beta);
sway = (force_l1+force_l2+force_r1+force_r2)*sin(beta);
heave = fz;
roll = tx;
pitch = ty;
yaw = ((force_l1+force_l2)-(force_r1+force_r2))*mr;
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Dampening Terms
fric_k = 0.35;
fric_m = 0.44;
fric_x = 0.22;
fric_n = 0.18;
fric_y = 1;
fric_z = 0.3;

% Friction
Fx_fric = 4.6358*u;     % W*fric_x*u;
Fy_fric = 21.0719*v;    % W*fric_y*v;
Fz_fric = 6.3216*w;     % W*fric_z*w;
K_fric = 0.9182*p;      % W*fric_k*mr*p;
M_fric = 1.1543*q;      % W*fric_m*mr*q;
N_fric = 0.4722*r;      % W*fric_n*mr*r;

% Air Resistance
% x-axis
Fx_ar = 0.0181*u*abs(u); % 0.5*Cd*x_area*rho*u*abs(u);

% Total Dampening
X_damp = Fx_fric+Fx_ar;
Y_damp = Fy_fric;
Z_damp = Fz_fric;
K_damp = K_fric;
M_damp = M_fric;
N_damp = N_fric;
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Gravity Terms
X_grav = W*stheta;
Y_grav = W*sphi*ctheta;
Z_grav = (W*ctheta*cphi)-W;
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Forces and Torques
% Forces
X = surge-X_damp+X_grav;
Y = sway-Y_damp+Y_grav;
Z = heave-Z_damp+Z_grav;

% Torques
K = roll-K_damp;
M = pitch-M_damp;
N = yaw-N_damp;
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Equations of Motion
% Linear Accelerations
udot = (X/m)+(v*r)-(w*q);
vdot = (Y/m)+(w*p)-(u*r);
wdot = (Z/m)+(u*q)-(v*p);

% Rotational Accelerations
pdot = (K-((Jz-Jy)*q*r))/Jx;
qdot = (M-((Jx-Jz)*r*p))/Jy;
rdot = (N-((Jy-Jx)*p*q))/Jz;
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Kinematics
% Linear Kinematics
xxdot = ((cpsi*ctheta)*u)+(((-spsi*cphi)-(cpsi*stheta*sphi))*v)+(((spsi*sphi)-(cpsi*stheta*cphi))*w); 
    % xxdot because xdot is the output matrix
ydot = ((spsi*ctheta)*u)+(((cpsi*cphi)-(spsi*stheta*sphi))*v)+(((-sphi*cpsi)-(spsi*cphi*stheta))*w);
zdot = ((stheta)*u)+((ctheta*sphi)*v)+((ctheta*cphi)*w);

% Angular Kinematics
% In theory +/-90 degrees for pitch is undefined but matlab tan()
% gives it a figure. Also this situation should not occur.
ttheta = tan(theta);
phidot = p+((-sphi*ttheta)*q)+((cphi*ttheta)*r); 
thetadot = ((cphi)*q)+((sphi)*r);
psidot = ((-sphi/ctheta)*q)+((cphi/ctheta)*r);
%---------------------------------------------------------------------%

%---------------------------------------------------------------------%
% Assign variables to ouput
xdot(1) = I1dot;
xdot(2) = w1dot;    
xdot(3) = t1dot;
xdot(4) = I2dot;
xdot(5) = w2dot;
xdot(6) = t2dot;
xdot(7) = I3dot;
xdot(8) = w3dot;    
xdot(9) = t3dot;
xdot(10) = I4dot;
xdot(11) = w4dot;
xdot(12) = t4dot;
xdot(13) = udot;
xdot(14) = vdot;    
xdot(15) = wdot;
xdot(16) = pdot;
xdot(17) = qdot;
xdot(18) = rdot;
xdot(19) = xxdot;
xdot(20) = ydot;    
xdot(21) = zdot;
xdot(22) = phidot;
xdot(23) = thetadot;
xdot(24) = psidot;
%---------------------------------------------------------------------%

xo = xi; % updates x(24)